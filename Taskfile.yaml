version: "3"

vars:
  ROOT: "{{.TASKFILE_DIR}}"

dotenv: ["{{.ROOT}}/.env"]

env:
  # Make compose find the file under utils/
  COMPOSE_FILE: "{{.ROOT}}/utils/docker-compose.yaml"
  # Give this project an isolated compose namespace
  COMPOSE_PROJECT_NAME: "bookshelf"

  # Defaults for DB env; .env can override these
  POSTGRES_USER: "{{.POSTGRES_USER | default `app`}}"
  POSTGRES_PASSWORD: "{{.POSTGRES_PASSWORD | default `app`}}"
  POSTGRES_DB: "{{.POSTGRES_DB | default `app`}}"
  POSTGRES_PORT: "{{.POSTGRES_PORT | default `5432`}}"
  POSTGRES_HOST: "{{.POSTGRES_HOST | default `host.docker.internal`}}"

  DB_URL: "postgres://{{.POSTGRES_USER}}:{{.POSTGRES_PASSWORD}}@{{.POSTGRES_HOST}}:{{.POSTGRES_PORT}}/{{.POSTGRES_DB}}?sslmode=disable"

tasks:
  init:
    desc: "First-time setup"
    dir: "{{.ROOT}}"
    cmds:
      # seed a usable .env the very first time
      - 'test -f .env || printf "POSTGRES_USER=app\nPOSTGRES_PASSWORD=app\nPOSTGRES_DB=app\nPOSTGRES_PORT=5432\nPOSTGRES_HOST=host.docker.internal\n" > .env'
      - task: db:up
      - task: db:wait
      - task: gen
      - task: db:migrate

  db:up:
    desc: "Start Postgres via Docker Compose"
    dir: "{{.ROOT}}"
    cmds:
      - docker compose up -d --remove-orphans db

  db:down:
    desc: "Stop Postgres"
    dir: "{{.ROOT}}"
    cmds:
      - docker compose stop db

  db:logs:
    desc: "Tail DB logs"
    dir: "{{.ROOT}}"
    cmds:
      - docker compose logs -f db

  db:wait:
    desc: "Wait for DB to be ready"
    silent: true
    cmds:
      - |
        echo "Waiting for Postgres at ${POSTGRES_HOST}:${POSTGRES_PORT}..."
        for i in {1..30}; do
          if pg_isready -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" >/dev/null 2>&1; then
            echo "Postgres is ready."
            exit 0
          fi
          sleep 1
        done
        echo "Timed out waiting for Postgres." >&2
        exit 1

  db:migrate:
    desc: "Apply DB migrations (goose)"
    dir: "{{.ROOT}}/backend"
    cmds:
      - goose -dir db/migrations postgres "{{.DB_URL}}" up

  gen:
    desc: "Generate code (sqlc)"
    dir: "{{.ROOT}}/backend"
    cmds:
      - sqlc generate

  dev:
    desc: "Run with live reload (Air)"
    deps: [gen, db:migrate]
    dir: "{{.ROOT}}/backend"
    cmds:
      - air

  doctor:
    desc: "Check toolchain and DB connectivity"
    cmds:
      - 'echo "PATH: $PATH"'
      - "command -v task && task --version"
      - "command -v sqlc && sqlc version"
      - "command -v goose && goose -version"
      - 'pg_isready -h "{{.POSTGRES_HOST}}" -p "{{.POSTGRES_PORT}}" -U "{{.POSTGRES_USER}}" -d "{{.POSTGRES_DB}}" || true'
